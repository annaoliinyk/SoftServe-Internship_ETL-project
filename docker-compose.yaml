version: '3.9'
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.4.0}
  environment: # used to pass environment variables straightly
    # set mechanism by which task instances get run, SequentialExecutor by default
    AIRFLOW__CORE__EXECUTOR: LocalExecutor  # LocalExecutor for small, single-machine installations
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow # set up a PostgreSQL db
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'  # false to execute dags on creating, true to pause execution
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  volumes:
    # mount (e.g.) local ./dags folder into the /opt/airflow/dags directory container
    - ./dags:/opt/airflow/dags  # folder to store DAG files
    - ./logs:/opt/airflow/logs  # contains logs from task execution and scheduler
    - ./plugins:/opt/airflow/plugins  # folder for custom plugins - operators, sensors, hooks used to customize Airflow

# Computing components of an application;
# abstract concept implemented on platforms by running the same container image (and configuration) one or more times
services:
  postgres:
    image: postgres:13
    environment: # used to pass environment variables straightly
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data  # mounted at /var/lib/postgresql/data - the directory where
      # Postgres stores all the relevant tables and databases, postgres-db-volume defined at the last line of the file
    restart: always

  airflow-webserver:
    <<: *airflow-common
    build:
      context: airflow_docker
    command: webserver
    ports:
      - '8080:8080'
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    build:
      context: airflow_docker
    command: scheduler
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

volumes:
  postgres-db-volume:
